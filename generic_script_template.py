"""
I'm creating this file to define a few guidelines for my python
script files.
This is focused on full, formal scripts, meant to read a main
parameter file and export outputs to a directory.
"""
import argparse
from pathlib import Path
import yaml


DEFAULT_PARAMS = dict(
    param_01=1,
)


def main():

    args: CLArgs = parse_args()
    params: Params = import_params(args)


# -------------------------------------------------------------------
# PROGRAM STRUCTURES
# -------------------------------------------------------------------

class CLArgs:
    """Command line arguments. This is only used for type hinting."""
    arg_01: str
    arg_02: int
    # ...

    input_file: Path
    output_dir: Path


class Params:
    """All parameters. Include hardcoded script params, those read
    from inputs, and overriden by command line flags.

    Parameters will have type hints in PyCharm, but raise
    AttributeError if referenced before assignment.

    This class works more as an autocomplete guide. It will receive
    any parameter that is either defined in DEFAULT_PARAMS, the input
    file and command line arguments.
    """
    param_01: int
    param_02: str
    param_03: None  # Not typed
    # ...


class Data:
    """Input, intermediate and output data.
    Input data is reserved for large structures. Smaller ones that
    can be manually set should be reserved as parameters.
    """
    data_01: None  # pd.Series, np.ndarray, list, etc...
    # ...


# -------------------------------------------------------------------
# PROGRAM PROCEDURES
# -------------------------------------------------------------------

def parse_args():
    """Interprets and stores the command line arguments."""

    parser = argparse.ArgumentParser(
        # usage="[[COMMAND LINE SIGNATURE (autogenerated)[]",
        description="[[PROGRAM DESCRIPTION HERE]]",
        # epilog="[[TEXT DISPLAYED AFTER ARGUMENTS DESCRIPTION]]",
    )

    # --- Positional paths
    parser.add_argument(
        "input_file", type=Path,
        help="Path to the file with input parameters."
    )
    parser.add_argument(
        "output_dir", type=Path,
        help="Path to the output directory, where all "
             "output files are stored."
    )

    # --- Optional flags

    return parser.parse_args()  # When all arguments are defined here
    # return parser.parse_known_args()  # If there are extra arguments


def import_params(args: CLArgs):
    """Imports the main YAML parameter file."""

    # --- Read file
    with open(args.input_file, "r") as fp:
        input_dict = yaml.load(fp, yaml.Loader)

    # --- Populate the Params in priority order
    # Script Default < Input File < Command Line Arguments
    params = Params()

    params.__dict__.update(DEFAULT_PARAMS)
    params.__dict__.update(input_dict)
    params.__dict__.update(args.__dict__)

    # params.input_dict = input_dict  # Use this to keep the input_dict

    # You can rename parameters here.

    return params


if __name__ == "__main__":
    main()
