---
# This is the official input file for the FluSight 2023/2024 season forecast. 
general:
  nperiods_main_roi: 20  # In aggregated periods. Only this region is seen by the forecast.

  # Dates
  day_pres_id: -1 # -266 -358 [Use for testing 2022]  # Index of day_pres in the truth file. Units are IN DAYS, not weeks!
  # day_pres_id: -8 # With prelim data!  # Index of day_pres in the truth file. Units are IN DAYS, not weeks!
  nperiods_fore: 6  # Weeks ahead of the last observed data to forecast.
  season_start: 2024-09-01   # Date from which cumulatives are calculated.
  due_example: 2023-10-04 23:00:00  # (WED 11PM) Example of due date/time
  ref_example: 2023-10-07           # (SAT) Example of reference date
  export_horizons_quantiles: [0, 1, 2, 3]  # Only export these horizon numbers to the FluSight file (quantile forecasts). Blank to export all.
  export_horizons_categorical: [0, 1, 2, 3]  # Only export these horizon numbers to the FluSight file (rate change forecasts). Blank to export all.

  # Paths
  hosp_data_path: "hosp_data/truth_latest.csv"
  hosp_data_fmt: "daily_inchosp_{date}.csv"  # Format string that accepts ISO date

  pop_data_path: "aux_data/locations.csv"
  preproc_data_dir: "preproc/flusight_dev/01"
  # flusight_output_file: "forecast_out/latest.csv"  # Defined in the script

  # State selection
  use_states: # ["Wyoming", "Illinois", "Florida", "California"]  # Leave blank to use all
#  dont_use_states: ["US", "Virgin Islands"]  # Always have "US"
  dont_use_states: ["US", "Virgin Islands"]

  # Generation time parameters
  tg_model: "const_gamma"
  tg_shape: 10.
  tg_rate: 3.333
  tg_max: 30


# --- PREPROCESSING
preprocessing:
  
  denoise_model: normal  # normal, normal_periodic, gamma_periodic
  denoise_method: lowpass  # lowpass, polyfit, rollav/rolling_average
  # For the noise object
  denoise_coef: 0.0  # Noise coefficient
  denoise_nperiods: 7  # (for normal_periodic) Period of weekly patterns in days

  # For lowpass/polyfit method
  denoise_cutoff: 0.300
  denoise_order: 2
  denoise_seed: 10
  
  # Negative artifacts
  negative_method: shift  # (clamp, shift) Method to deal with negative incidence values after filtering

# --- R(t) ESTIMATION (MCMC)
rt_estimation:
#  method: mcmc  # Only mcmc for now
  engine: gamma     # c, numba, gamma
  seed: 10
  roi_len: 80  # In granular periods. Must be bigger than nperiods_past + i_t0. Blank to use main_roi (in weeks).

  # Data scaling
  scale_method: data_pwr  # const, data_pwr, pop_pwr?
  scale_roi_len: 60   # ["data_pwr" method] â€“ How many granular periods of past incidence to consider for the scaling factor.
  scale_power: 0.95   # Pwr method: scaled = (ref / avg) ** power. Values lower than 1 add uncertainty to lower incidence and remove from higher.
  scale_ref_inc: 600  # 65  # Reference incidence for scaling ["data_pwr" method]. Larger => more confident
  scale_ref_pop: 12000  # Reference population for scaling ["pop_pwr" method]
  # scale_factor: 1.2  # ["const" method; overridden by other methods]

  # MCMC parameters
  nsim: 14000
  ntrans: 4000  # Number of transients (from the total nsim, must be smaller).
  sigma: 0.05
  i_t0: 50  # First time point of the MCMC ROI to calculate R(t) for. Ideally should be equals to or greater than tg_max.

# --- R(t) SYNTHESIS
rt_synthesis: 
  synth_method: drift_const  # drift_pop, drift_const  # static_ramp, dynamic_ramp, rnd_normal, default, drift_pop, drift_const
  tg_synth_method: same  # Generation time assumed as constant
  seed: 10

  # Common parameters
  q_low: 0.01    # Sorted ensemble: low quantile
  q_hig: 0.99    # Sorted ensemble: high quantile
  nperiods_past: 7  # Number of days (backwards) to consider in synthesis. Shorter than mcmc roi_len
  r_max: 6.0     # [UPDATE: rejects any estimate ensemble that reaches this threshold] Clamp up to these R values (for the average)

  # Drift synth-reconstruction parameters
#  drift_pop_coef: 50  #20.0e+3  # Coefficient of the drift term (population-normalized) ["drift_pop"]. Drift = coef / pop * c(t). Higher = more drift.
  drift_coef: 0.16e-5  # Pure drift coefficient. Drift = coef * c(t). Overriden unless using synth_method = drift_const.
  rw_coef: 0.0
  bias: 0.000  # 0.001  # Bias added to the exponent at each R(t) drift step
  initial_bias: -0.03  # Bias added at the first R(t) drift step

  # Static ramp (RAMP COEFFICIENTS WILL BE MODULATED)
  k_start: 0.95    # Ramp method: starting coefficient
  k_end: 0.85      # Ramp method: ending coefficient
  i_saturate: -1   # Ramp method: saturate ramp at this number of days. Use -1 to deactivate.

  # Dynamic ramp
  r1_start: 1.0
  r2_start: 1.2
  r1_end: 0.9  # 1.5 # R_new Value to which R :  1 is converted
  r2_end: 1.02  # 0.9 # R_new Value to which R = 2 is converted
  transform: "quadratic"  # "linear", "quadratic"

  # Normal distribution synthesis
  center: 1.15
  sigma: 0.15
  nsamples: 500

# --- C(t) RECONSTRUCTION
inc_reconstruction:
  method: default
  gen_noise: false  # NOT IMPLEMENTED RIGHT NOW
  seed: 1

postprocessing:
  inc_quantiles: [0.01, 0.025, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35,
       0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7 , 0.75, 0.8, 0.85, 0.9,
       0.95, 0.975, 0.99]
  aggr_ref_tlabel: 2023-10-08  # [SUNDAY 00am] The weekly stamp that divides weekly aggregations. 
  use_aggr_level: aggr   # Whether the quantiles should be daily ("gran"), weekly ("aggr") or both ("both")
  categorical_thresholds:  # Rate thresholds for categorical rate change forecast.
      -1: [1.7, 0.3]  # ?
      0:  [1.7, 0.3]
      1:  [3.0, 0.5]
      2:  [4.0, 0.7]
      3:  [5.0, 1.0]
      4:  [5.0, 1.0]
  # Signature ^ ^: d[horizon] = [large_threshold, stable_threshold]
  # The `large_threshold` defines the limit between "increase" and "large increase"
  # The `stable_threshold` defines the limit between "stable" and "increase"
  # Same thresholds apply for decreasing trends.
