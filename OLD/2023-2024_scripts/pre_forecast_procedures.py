"""
Run routine procedures to set up the workspace for a new week of the
FluSight forecast.
Taylored for the season: 2023/2024.

- [ ] Backup the truth files as it is downloaded!
- [ ] Check conda environment?
- [ ] Run the Rscript to get the truth file.
"""
print("Importing libraries...")
import argparse
import os
import shutil
import subprocess
import sys
from pathlib import Path

import pandas as pd
import yaml

from rtrend_forecast.reporting import get_rtrend_logger, SUCCESS

_LOGGER = get_rtrend_logger().getChild(__name__)


DEFAULT_PARAMS = dict(
    truth_file=Path("hosp_data/truth_daily_latest.csv"),
    truth_file_weekly=Path("hosp_data/truth_weekly_latest.csv"),
    fetch_truth=True,
    backup_truth=True,
    backup_dir=Path("hosp_data/past_BKP"),
)


def main():

    args: CLArgs = parse_args()
    params: Params = build_params(args)
    data = Data()

    fetch_and_backup_truth_data(params, data)


# -------------------------------------------------------------------
# PROGRAM STRUCTURES
# -------------------------------------------------------------------

class CLArgs:
    """Command line arguments. This is only used for type hinting."""
    truth_file: Path
    truth_file_weekly: Path
    now: pd.Timestamp


class Params:
    """All parameters. Include hardcoded script params, those read
    from inputs, and overriden by command line flags.

    Parameters will have type hints in PyCharm, but raise
    AttributeError if referenced before assignment.

    This class works more as an autocomplete guide. It will receive
    any parameter that is either defined in DEFAULT_PARAMS, the input
    file and command line arguments.
    """
    # ...
    truth_file: Path
    truth_file_weekly: Path
    now: pd.Timestamp
    fetch_truth: bool
    backup_truth: bool
    backup_dir: Path


class Data:
    """Input, intermediate and output data.
    Input data is reserved for large structures. Smaller ones that
    can be manually set should be reserved as parameters.
    """
    data_01: None  # pd.Series, np.ndarray, list, etc...
    # ...


# -------------------------------------------------------------------
# PROGRAM PROCEDURES
# -------------------------------------------------------------------

def parse_args():
    """Interprets and stores the command line arguments."""

    parser = argparse.ArgumentParser(
        # usage="[[COMMAND LINE SIGNATURE (autogenerated)[]",
        description=
        "Run routine procedures to set up the workspace for a new week"
        " of the FluSight forecast.",
        # epilog="[[TEXT DISPLAYED AFTER ARGUMENTS DESCRIPTION]]",
    )

    # # --- Positional paths
    # parser.add_argument(
    #     "input_file", type=Path,
    #     help="Path to the file with input parameters."
    # )
    # parser.add_argument(
    #     "output_dir", type=Path,
    #     help="Path to the output directory, where all "
    #          "output files are stored."
    # )

    # --- Optional flags
    parser.add_argument(
        "-t", "--truth-file",
        help="(Optional) path to the daily truth data file. "
             f"Default is {DEFAULT_PARAMS['truth_file']}.",
        default=DEFAULT_PARAMS['truth_file'],
        type=Path,
    )

    parser.add_argument(
        "--truth-file-weekly",
        help="(Optional) path to the weekly truth data file. "
             f"Default is {DEFAULT_PARAMS['truth_file_weekly']}.",
        default=DEFAULT_PARAMS['truth_file_weekly'],
        type=Path,
    )

    parser.add_argument(
        "--now", type=pd.Timestamp,
        help="Timestamp to be considered as \"now\". Defaults to "
             "pandas.Timestamp.now().",
        default=pd.Timestamp.now(),  #"US/Eastern"),
    )

    parser.add_argument(
        "--fetch-truth",
        action=argparse.BooleanOptionalAction,
        default=DEFAULT_PARAMS["fetch_truth"],
        help="Whether to retrieve truth data from online sources."
    )

    parser.add_argument(
        "--backup-truth",
        action=argparse.BooleanOptionalAction,
        default=DEFAULT_PARAMS["backup_truth"],
        help="Whether to save a copy of the latest truth data with the "
             "current day as a stamp."
    )

    return parser.parse_args()  # When all arguments are defined here
    # return parser.parse_known_args()  # If there are extra arguments


def build_params(args: CLArgs):
    """Make parameters from arguments and defaults."""

    params = Params()

    valid_args_dict = {key: val for key, val in args.__dict__.items()
                       if val is not None}

    # --- Build params in priority order: arguments > defaults
    params.__dict__.update(DEFAULT_PARAMS)
    params.__dict__.update(
        valid_args_dict
    )

    return params


#
#
# =====================================================================
# PROGRAM PROCEDURES
# =====================================================================
#
#


def fetch_and_backup_truth_data(params, data):
    """"""
    _LOGGER.debug("Entered fetch_and_backup_truth_data")

    # --- Fetching data
    if params.fetch_truth:
        # -()- Use Rscript program â€“ REQUIRES MULTIPLE R LIBRARIES
        #         (covidcast, rsocrata, lubridate)
        cmd = (f"Rscript get_truth.R "
               f"--truth-file {params.truth_file} "
               f"--truth-file-weekly {params.truth_file_weekly}")
        print(cmd)
        _LOGGER.info("Fetching the truth files (using Rscript)...")
        try:
            res = subprocess.run(cmd.split(), capture_output=True, check=True)
        except subprocess.CalledProcessError as e:
            _LOGGER.critical("Error running the R script. Message:")
            print(e)
            sys.exit(1)

        print(res.stdout)
        _LOGGER.log(SUCCESS, "Fetching complete.")

        # -()- Alternative: use Python's socrata interface, or adapt
        #      the get-truth-data.py from Covid-19 forecast hub.

    else:  # Fetch truth skipped
        _LOGGER.warn(
            "--no-fetch-truth: truth files will not be downloaded."
        )

    # # --- Backup recently downloaded files
    if params.backup_truth:
        _LOGGER.info("Backing up the daily truth file...")
        # --- Manipulates the daily truth file name to make the backup.
        basename = params.truth_file.name
        name, ext = basename.split(".")
        bkp_basename = f"{name}_{params.now.date().isoformat()}.{ext}"
        bkp_path = params.backup_dir.joinpath(bkp_basename)

        # --- Make dir and copy file to it
        os.makedirs(bkp_path.parent, exist_ok=True)
        shutil.copy2(params.truth_file, bkp_path)
        _LOGGER.log(
            SUCCESS, f"Copied the truth daily file to '{bkp_path}'"
        )
        # _LOGGER.error(ext)
        # shutil.copy2()
    else:
        _LOGGER.warn(
            "--no-backup-truth: no copies of the truth files will be "
            "saved as a backup."
        )


if __name__ == "__main__":
    main()
